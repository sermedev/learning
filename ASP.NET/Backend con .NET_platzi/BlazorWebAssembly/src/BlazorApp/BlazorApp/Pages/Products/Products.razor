@page "/products"
@using BlazorApp.Models
@using BlazorApp.Services

@inject ILogger<Products> logger;
@inject IProductService productService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;


<PageTitle>Products</PageTitle>

<ModuleTitle Title="Products" />

<button class="btn btn-dark" @onclick="@(()=> NavigationManager.NavigateTo("/addproduct"))">Add product</button>

@if(_products?.Count > 0)
{
    <div class="products-container">
        @foreach (var product in _products)
        {
            <div class="card">
                <img class="card-img-top" src="@product.Images[0]" alt="Product" loading="lazy" width="270" height="210">
                <div class="card-body">
                    <h5><b>@product.Title</b></h5>
                    <p>@product.Price.ToString("C")</p>
                    <button title="Delete" class="btn btn-danger btn-delete" @onclick="@(() => DeleteProduct(product))">Delete</button>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No hay productos para mostrar</p>
}

@code
{
    private List<Product>? _products;

    protected override async Task OnInitializedAsync()
    {
        await GetProducts();
    }

    private async Task GetProducts()
    {
        _products = await productService.Get();
    }

    private async Task DeleteProduct(Product product)
    {
        if(!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to remove {product.Title}"))
        {
            return;
        }

        await productService.Delete(product.Id);

        await GetProducts();
    }
}